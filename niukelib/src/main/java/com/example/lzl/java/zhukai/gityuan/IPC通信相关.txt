linux跨进程通讯的方式：
1）管道：自创建的时候分配一个page大小的内存，缓存区大小比较有限。
2）消息队列:消息复制两次，额外的CPU消耗；不适合频繁信息量较大的通信。
3）共享内存：无需复制，共享缓存区直接附加到进程虚拟地址空间，速度快；但进程的同步问题，操作系统无法实现，必须各进程利用同步工具解决。
4）套接字：作为更通用的接口效率低,主要用于不通机器或跨网络的通信；
5）信号量：常做一种锁机制，防止某进程访问共享资源时，其它进程也访问该资源，主要用于进程间，同一进程不同线程之间的同步手段。
6）信号：不适于信息交换，更适用于进程中断控制。例如：非法内存访问，杀死某个进程。

binder的分析：
1）从性能角度数据拷贝次数：binder只需要数据拷贝一次。管道、消息队列、socket需要2次。共享内存不需要。
2）稳定性角度：Binder是基于C/S架构。（客户端和服务端组成的架构，client端有什么需求，直接发送给service端完成，架构清晰明朗，s,v端相对独立稳定性较好）
共享内存实现方式复杂，没有c,s之别，需要充分考虑到访问临界资源的并发同步问题，否则可能会产生死锁。架构优于共享内存。
3）安全角度：传统Linux IPC的接收方无法获得对方进程可靠的UID/PID,从而无法鉴别对方身份。android开源，传统ipc无任何保护措施，完全由上层协议来确保。
android每个安装好的应用分配了自己的UID,进程的UID是鉴别进程身份的重要标志。
--Android系统中对外只暴露Client端，Client端将任务发送给Server端，Server端会根据权限控制策略，判断UID/PID是否满足访问权限，
  目前权限控制很多时候是通过弹出权限询问对话框，让用户选择是否运行。
4）从语言层面角度：

网址：https://www.zhihu.com/question/39440766/answer/89210950

